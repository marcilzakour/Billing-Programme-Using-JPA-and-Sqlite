/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import entities.BillType;
import entities.Bill;
import entities.Customer;
import entities.Item;
import entities.Product;
import entities.controllers.BillJpaController;
import entities.controllers.CustomerJpaController;
import entities.controllers.ItemJpaController;
import entities.controllers.ProductJpaController;
import entities.controllers.StorageJpaController;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marcil
 */
/*
this Dialog read bill data from user (using a GUI)and create a Bill object out of the data
*/
public class BillReader extends javax.swing.JDialog {
    /*instances of the entities controllers needed for bill and items manipulation*/
    private BillJpaController billController;	
    private ProductJpaController productController;
    private ItemJpaController itemController;
    private CustomerJpaController customerController;
    private StorageJpaController storageController;
    /*the data fileds of the bill*/
    private Long billId;
    private int billTotal;
    private Bill billToReturn;
    private BillType billType;

    /**
     * Creates new form BillReader
     * create the default values according to the bill type
     * @param parent
     * @param modal
     * @param type
     */
    public BillReader(java.awt.Frame parent, boolean modal, BillType type) {
        super(parent, modal);
        initComponents();
        init();
        this.billType = type;
        switch (billType) {
            case companyBill:
                setTitle("انشاء فاتورة شركة");
                nameLabel.setText("اسم الشركة");
                
                break;
            case customerBill:
                setTitle("انشاء فاتورة زبون");
                nameLabel.setText("اسم الزبون");
                break;
            default:
                setTitle("انشاء فاتورة");
                nameLabel.setText("الاسم");
        }
        fillAutoCompleteWithProducts(productNameAutoComplete);
        setVisible(true);

    }
 //read available products and add them to the bill records
 private void fillAutoCompleteWithProducts(final AutoComplete auto){
        auto.clearData();
        productController.findProductEntities().stream().forEach((p->auto.addEntry(p.getId(), p.getPriority())));
    }
    //initialize the fields with the default values
    public final void init() {
        EntityManagerFactory factory = Persistence.createEntityManagerFactory("APPU");
        billId = -1l;
        billTotal = 0;
        billController = new BillJpaController(factory);
        productController = new ProductJpaController(factory);
        itemController = new ItemJpaController(factory);
        customerController = new CustomerJpaController(factory);
        storageController = new StorageJpaController(factory);
    }
    ///SETTERS AND GETTERS
    public Long getBillId() {
        return billId;
    }

    public void setBillId(Long billId) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public Bill getBillToReturn() {
        return billToReturn;
    }

    public void setBillToReturn(Bill billToReturn) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        billTable = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        productNameAutoComplete = new gui.AutoComplete();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        costValidTextField = new gui.ValidTextField();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        totalTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        payedTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        nameValidTextField = new gui.ValidTextField();
        nameLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
	//modify the JTalbe to model(add colums)
        billTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "اسم المنتج", "الكمية", "سعر الشراء"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(billTable);

        jButton3.setText("تم");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("اسم المنتج");

        productNameAutoComplete.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                productNameAutoCompleteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                productNameAutoCompleteFocusLost(evt);
            }
        });

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel4.setText("الكمية");

        jLabel5.setText("السعر");

        costValidTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                costValidTextFieldFocusGained(evt);
            }
        });
        costValidTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                costValidTextFieldActionPerformed(evt);
            }
        });

        jButton1.setText("التالي");
        jButton1.setNextFocusableComponent(productNameAutoComplete);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quantitySpinner)
                            .addComponent(costValidTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel5))))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(productNameAutoComplete, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(productNameAutoComplete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(costValidTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jButton4.setText("حذف سطر");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        totalTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalTextFieldActionPerformed(evt);
            }
        });

        jLabel7.setText("الاجمالي");

        payedTextField.setText("0");

        jLabel6.setText("المدفوع");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(payedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(payedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 1, Short.MAX_VALUE))
        );

        nameValidTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                nameValidTextFieldFocusLost(evt);
            }
        });
        nameValidTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameValidTextFieldActionPerformed(evt);
            }
        });

        nameLabel.setText("الاسم");

        jLabel3.setText("التاريخ");

        jSpinner1.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, new java.util.Date(), java.util.Calendar.DAY_OF_MONTH));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSpinner1)
                    .addComponent(nameValidTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLabel)
                    .addComponent(jLabel3)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLabel)
                    .addComponent(nameValidTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton3)
                        .addComponent(jButton4)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        if (!vaidate()) {
            billId = -1l;
            billToReturn = null;
            return;
        }
        Bill bill = new Bill();
        bill.setBillType(billType);
        try {
            String customerName = nameValidTextField.getText();
            Date releaseDate = (Date) jSpinner1.getValue();
            int payed = Integer.parseInt(payedTextField.getText());
            int finalTotal = Integer.parseInt(totalTextField.getText());
            Customer owner = customerController.findCustomer(customerName);
            if (owner == null) {

                if (Helper.confirmCreateCustomer(customerName)) {
                    owner = new Customer(customerName);
                    customerController.create(owner);
                } else {
                    return;
                }
            }

            bill.setOwner(owner);
            bill.setPayed(payed);
            bill.setReleaseDate(releaseDate);
            bill.setFinalTotal(finalTotal);
            bill.setItems(new ArrayList<>());
            DefaultTableModel table = (DefaultTableModel) billTable.getModel();
            for (int i = 0; i < table.getRowCount(); ++i) {
                String productName = (String) table.getValueAt(i, 0);
                int quantity = (int) table.getValueAt(i, 1);
                int cost = (int) table.getValueAt(i, 2);

                if (productController.findProduct(productName) == null) {
                    if (Helper.confirmCreateProduct(productName)) {
                        try {
                            productController.create(new Product(productName, cost,0));
                        } catch (Exception ex) {
                            Helper.error(ex);
                            
                        }
                    } else {
                        continue;
                    }
                }
                Item item = new Item(productName, cost, quantity);
                bill.addItem(item);
            }
            billController.create(bill);
            billId = bill.getId();
            JOptionPane.showMessageDialog(null, "تمت اضافة الفاتورة, رقم الفاتورة" + billId);
            billToReturn = bill;
        } catch (NumberFormatException ex) {
            Helper.error(ex);

        }
        setVisible(false);
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void costValidTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_costValidTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_costValidTextFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            if (!validateCurrentItem()) {
                return;
            }
            String productName = productNameAutoComplete.getText();
            int quantity = (int) quantitySpinner.getValue();
            int cost = Integer.parseInt(costValidTextField.getText());
            billTotal += cost * quantity;
            totalTextField.setText(billTotal + "");

            DefaultTableModel table = (DefaultTableModel) billTable.getModel();

            //            if (productController.findProduct(productName) == null) {
            //                if (!showUserConformation(productName)) {
            //                    return;
            //                }
            //            }
            //            Item item = new Item(productController.findProduct(productName), quantity);
            //            itemController.create(item);
            //            bill.addItem(item);
            //            billController.edit(bill);
            table.addRow(new Object[]{productName, quantity, cost});

        } catch (NumberFormatException ex) {
            Helper.error(ex);
        }
/* uncomment to clear record values
        productNameAutoComplete.setText("");
        quantitySpinner.setValue(0);
        costValidTextField.setText("" + 0);
*/
        //
        //        if(checkProduct(productName)){
        //            try {
        //                Item item = new Item(controlPanel.getProduct(productName), quantity);
        //                controlPanel.addProductItem(productName, item);
        //                bill.getItems().add(new Item(new Product(productName, cost),quantity));
        //            } catch (Exception ex) {
        //                Logger.getLogger(CompanyBillEditor.class.getName()).log(Level.SEVERE, null, ex);
        //                JOptionPane.showMessageDialog(null,ex + "حدث خطأ اثناء اضافة المننج");
        //            }
        //        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        DefaultTableModel table = (DefaultTableModel) billTable.getModel();
        int rows[] = billTable.getSelectedRows();
        if (rows.length == 0) {
            JOptionPane.showMessageDialog(null, "لا يوجد اسطر محددة للحذف رجاء حدد اسطر من الجدول");
            return;
        }
        for (int i = 0; i < rows.length; ++i) {
            rows[i]++;
        }
        if (JOptionPane.showConfirmDialog(null, "هل تريد حذف السطر/الاسطر" + Arrays.toString(rows)) == JOptionPane.YES_OPTION) {
            while (true) {
                int row = billTable.getSelectedRow();
                if (row == -1) {
                    break;
                }
                int cost = (int) billTable.getValueAt(row, 2);
                int quantity = (int) billTable.getValueAt(row, 1);
                billTotal -= cost * quantity;
                table.removeRow(row);
            }
            totalTextField.setText(billTotal + "");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void totalTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalTextFieldActionPerformed

    private void nameValidTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameValidTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameValidTextFieldActionPerformed

    private void productNameAutoCompleteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_productNameAutoCompleteFocusLost
        String productName = productNameAutoComplete.getText();
        costValidTextField.setText(getProductPrice(productName) + "");
    }//GEN-LAST:event_productNameAutoCompleteFocusLost

    private void nameValidTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameValidTextFieldFocusLost
        String customerName = nameValidTextField.getText();
        if (Helper.isValidName(customerName)) {
            if (customerController.findCustomer(customerName) == null) {
                if (Helper.confirmCreateCustomer(customerName)) {
                    customerController.create(new Customer(customerName));
                    return;
                }
            }else return;
        }
        nameValidTextField.setText("");


    }//GEN-LAST:event_nameValidTextFieldFocusLost

    private void productNameAutoCompleteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_productNameAutoCompleteFocusGained
        productNameAutoComplete.selectAll();
        fillAutoCompleteWithProducts(productNameAutoComplete);
    }//GEN-LAST:event_productNameAutoCompleteFocusGained

    private void costValidTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_costValidTextFieldFocusGained
        costValidTextField.selectAll();
    }//GEN-LAST:event_costValidTextFieldFocusGained

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(BillReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(BillReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(BillReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(BillReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                BillReader dialog = new BillReader(new javax.swing.JFrame(), true, BillType.NONE);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable billTable;
    private gui.ValidTextField costValidTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JLabel nameLabel;
    private gui.ValidTextField nameValidTextField;
    private javax.swing.JTextField payedTextField;
    private gui.AutoComplete productNameAutoComplete;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTextField totalTextField;
    // End of variables declaration//GEN-END:variables
    //check if table vlues are valid
    private boolean vaidate() {
        if(billTable.getRowCount() == 0){
            Helper.error("الجدول فارغ");
            return false;
        }
        return Helper.isValidCost(payedTextField.getText(),true) && Helper.isValidCost(totalTextField.getText(),true);
    }
    //check if item fields entered by user are valid
    private boolean validateCurrentItem() {
        return Helper.isValidName(productNameAutoComplete.getText(), true)
            && Helper.isValidQuantity(quantitySpinner.getValue().toString(), true)
            && Helper.isValidCost(costValidTextField.getText(), true);
    }
    //search and find product price (if product is new sets 0)
    private int getProductPrice(String productName) {
        Product p = productController.findProduct(productName);
        if (p == null) {
            return 0;
        }else return p.getCurrentPrice();
    }

}
